M√©todos para Convertir HTML a PDF en Oracle APEX

Convertir contenido HTML a PDF es un requisito com√∫n en aplicaciones web. Este art√≠culo de blog demuestra tres enfoques diferentes para lograr esto en aplicaciones Oracle APEX, cada uno con sus propias ventajas y casos de uso.

üîó Demo en Vivo: https://oracleapex.com/ords/f?p=32431:1210:102704750023317:::::

RESUMEN DE M√âTODOS

‚Ä¢ M√©todo 1: jsPDF con Dimensiones Fijas - Generaci√≥n de PDF simple y predecible con tama√±os de p√°gina predefinidos
‚Ä¢ M√©todo 2: jsPDF con Escalado Din√°mico - Adaptaci√≥n inteligente del contenido con orientaci√≥n y escalado autom√°tico
‚Ä¢ M√©todo 3: M√©todo de Impresi√≥n del Navegador - Aprovecha las capacidades nativas de generaci√≥n de PDF del navegador

CONFIGURACI√ìN DE BASE DE DATOS

Primero, crea la tabla para almacenar documentos HTML. Para el script DDL completo, consulta html_tmp_table.sql.

LIBRER√çAS REQUERIDAS

Agrega estas librer√≠as a tu p√°gina APEX (P√°gina > JavaScript > File URLs):

https://github.com/Aftorres02/blog_app_examples/tree/master/post_2025/18_tmp_html_to_pdf_dow/libs

Referencias de Librer√≠as:
‚Ä¢ Documentaci√≥n jsPDF: https://github.com/parallax/jsPDF
‚Ä¢ Documentaci√≥n html2canvas: https://github.com/niklasvh/html2canvas
‚Ä¢ Documentaci√≥n Oracle APEX: https://docs.oracle.com/en/database/oracle/application-express/

PROCESO APEX

Crea un proceso AJAX llamado GET_HTML_CONTENT:

declare
    l_html_content clob;
    l_document_id number;
begin
    l_document_id := apex_application.g_x01;
    
    select html_content, document_name
    into l_html_content, :P1210_DOCUMENT_NAME
    from html_documents
    where id = l_document_id
    and active_yn = 'Y';
    
    apex_json.open_object;
    apex_json.write('html_content', l_html_content);
    apex_json.write('document_name', :P1210_DOCUMENT_NAME);
    apex_json.close_object;
    
exception
    when no_data_found then
        apex_json.open_object;
        apex_json.write('error', 'Document not found');
        apex_json.close_object;
end;

M√âTODO 1: jsPDF con Dimensiones Fijas

Qu√© hace: Crea un PDF con dimensiones predefinidas (900x630 puntos) y convierte el contenido HTML directamente al formato PDF. Este m√©todo proporciona buen control sobre el tama√±o de p√°gina pero puede no ajustarse autom√°ticamente a las dimensiones del contenido.

apex.server.process(
  "GET_HTML_CONTENT",
  {
    x01: apex.item("P1210_DOCUMENT_ID").getValue(),
  },
  {
    success: function (data) {
      var doc = new jspdf.jsPDF("p", "pt", [900, 630]);

      doc.html(data.html_content, {
        callback: function (doc) {
          if (doc.getNumberOfPages() >= 2) {
            doc.deletePage(2);
          }
          var filename = data.document_name;
          doc.save(filename + ".pdf");
        },

        // Establecer el punto de inicio de renderizado y tama√±o
        x: 0,
        y: 0,
        margin: 20,
        width: 590, // ANCHO completo de la p√°gina en puntos
        windowWidth: 590, // Opcional: ayuda a html2canvas a entender el layout

        html2canvas: {
          useCORS: true,
          allowTaint: true,
          scale: 1, // Ajustar esto para calidad vs rendimiento
        },
      });
    },
    error: function () {
      alert("Error loading document content");
    },
  }
);

M√âTODO 2: jsPDF con Orientaci√≥n y Escalado Din√°mico

Qu√© hace: Detecta autom√°ticamente las dimensiones del contenido y elige la mejor orientaci√≥n (vertical/horizontal) y factor de escalado para ajustar el contenido perfectamente dentro de la p√°gina PDF. Este m√©todo proporciona la adaptaci√≥n de contenido m√°s inteligente.

apex.server.process(
  "GET_HTML_CONTENT",
  {
    x01: apex.item("P1210_DOCUMENT_ID").getValue(),
  },
  {
    success: function (data) {
      // Crear un contenedor oculto din√°micamente
      let tempContainer = document.createElement("div");
      tempContainer.id = "htmlContentHidden";
      document.body.appendChild(tempContainer);

      // Insertar contenido HTML
      tempContainer.innerHTML = data.html_content;

      // Medir dimensiones del contenido
      const contentWidth = tempContainer.scrollWidth;
      const contentHeight = tempContainer.scrollHeight;

      // Decidir orientaci√≥n basada en la proporci√≥n de aspecto
      let orientation = contentWidth > contentHeight ? "l" : "p";

      // Inicializar jsPDF con orientaci√≥n din√°mica
      const { jsPDF } = window.jspdf;
      let doc = new jsPDF(orientation, "pt", "a4");

      // Obtener dimensiones reales de p√°gina de jsPDF
      const pageWidth = doc.internal.pageSize.getWidth();
      const pageHeight = doc.internal.pageSize.getHeight();

      // Calcular escala para que el contenido se ajuste al ancho de p√°gina (m√°x = 1)
      const scaleFactor = Math.min((pageWidth - 40) / contentWidth, 1);

      // Generar PDF
      doc.html(tempContainer, {
        callback: function (doc) {
          doc.save("dynamic_fit.pdf");
          // Limpiar
          document.body.removeChild(tempContainer);
        },
        x: 20,
        y: 20,
        width: pageWidth - 40, // ancho utilizable con m√°rgenes
        windowWidth: contentWidth, // ancho HTML original
        html2canvas: {
          scale: scaleFactor,
          useCORS: true,
          allowTaint: true,
        },
      });
    },
    error: function () {
      alert("Error loading document content");
    },
  }
);

M√âTODO 3: M√©todo de Impresi√≥n del Navegador

Qu√© hace: Abre el contenido HTML en una nueva ventana del navegador y activa el di√°logo de impresi√≥n nativo del navegador, permitiendo a los usuarios guardar como PDF usando la funcionalidad PDF integrada de su navegador. Este m√©todo aprovecha las capacidades nativas de generaci√≥n de PDF del navegador.

apex.server.process(
  "GET_HTML_CONTENT",
  {
    x01: apex.item("P1210_DOCUMENT_ID").getValue(),
  },
  {
    success: function (data) {
      var printWindow = window.open('', '_blank', 'width=800,height=600');
      printWindow.document.write('<!DOCTYPE html>');
      printWindow.document.write('<html><head><title>Document</title>');
      printWindow.document.write('<style>body{font-family:Arial,sans-serif;margin:20px;}</style>');
      printWindow.document.write('</head><body>');
      printWindow.document.write(data.html_content);
      printWindow.document.write('</body></html>');
      printWindow.document.close();
      
      setTimeout(function() {
          printWindow.print();
          setTimeout(function() {
              printWindow.close();
          }, 1000);
      }, 500);
    },
    error: function () {
      alert("Error loading document content");
    },
  }
);

COMPARACI√ìN DE M√âTODOS

M√âTODO 1: JSPDF CON DIMENSIONES FIJAS

VENTAJAS:
‚Ä¢ Simple de implementar
‚Ä¢ Salida predecible y consistente
‚Ä¢ Control total sobre las dimensiones del PDF
‚Ä¢ Ideal para documentos con formato est√°ndar

DESVENTAJAS:
‚Ä¢ Puede no ajustar todo el contenido autom√°ticamente
‚Ä¢ Requiere ajuste manual de par√°metros
‚Ä¢ Menos flexible para contenido variable

MEJOR PARA:
‚Ä¢ Documentos est√°ndar con formato fijo
‚Ä¢ Casos de uso simples y r√°pidos
‚Ä¢ Prototipos y demos b√°sicos
‚Ä¢ Aplicaciones con requisitos de formato espec√≠fico

---

M√âTODO 2: JSPDF CON ESCALADO DIN√ÅMICO

VENTAJAS:
‚Ä¢ Adaptaci√≥n inteligente del contenido
‚Ä¢ Orientaci√≥n autom√°tica (vertical/horizontal)
‚Ä¢ Ajuste perfecto del contenido a la p√°gina
‚Ä¢ Optimizaci√≥n autom√°tica de espacio

DESVENTAJAS:
‚Ä¢ C√≥digo m√°s complejo de implementar
‚Ä¢ Requiere m√°s recursos computacionales
‚Ä¢ Mayor tiempo de procesamiento
‚Ä¢ M√°s dif√≠cil de depurar

MEJOR PARA:
‚Ä¢ Tama√±os de contenido variables
‚Ä¢ Documentos din√°micos con contenido cambiante
‚Ä¢ Aplicaciones profesionales
‚Ä¢ Casos donde la optimizaci√≥n del espacio es cr√≠tica

---

M√âTODO 3: IMPRESI√ìN DEL NAVEGADOR

VENTAJAS:
‚Ä¢ No necesita librer√≠as externas
‚Ä¢ Usa capacidades nativas del navegador
‚Ä¢ Compatible con todos los navegadores modernos
‚Ä¢ Implementaci√≥n muy simple

DESVENTAJAS:
‚Ä¢ Requiere interacci√≥n del usuario
‚Ä¢ Menos control sobre el formato final
‚Ä¢ Dependiente de la configuraci√≥n del navegador
‚Ä¢ No es completamente automatizable

MEJOR PARA:
‚Ä¢ Implementaciones simples y r√°pidas
‚Ä¢ Prototipos y pruebas de concepto
‚Ä¢ Demos y presentaciones
‚Ä¢ Casos donde la simplicidad es prioritaria
